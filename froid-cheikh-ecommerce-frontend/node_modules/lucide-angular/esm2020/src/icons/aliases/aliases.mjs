// AlarmClockCheck aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link AlarmClockCheck} instead. This alias will be removed in v1.0 */
default as AlarmCheck } from '../icons/alarm-clock-check';
// AlarmClockMinus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link AlarmClockMinus} instead. This alias will be removed in v1.0 */
default as AlarmMinus } from '../icons/alarm-clock-minus';
// AlarmClockPlus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link AlarmClockPlus} instead. This alias will be removed in v1.0 */
default as AlarmPlus } from '../icons/alarm-clock-plus';
// ArrowDownAZ aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ArrowDownAZ} instead. This alias will be removed in v1.0 */
default as ArrowDownAz } from '../icons/arrow-down-a-z';
// ArrowDownZA aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ArrowDownZA} instead. This alias will be removed in v1.0 */
default as ArrowDownZa } from '../icons/arrow-down-z-a';
// ArrowDownWideNarrow aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ArrowDownWideNarrow} instead. This alias will be removed in v1.0 */
default as SortDesc } from '../icons/arrow-down-wide-narrow';
// ArrowUpAZ aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ArrowUpAZ} instead. This alias will be removed in v1.0 */
default as ArrowUpAz } from '../icons/arrow-up-a-z';
// ArrowUpNarrowWide aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ArrowUpNarrowWide} instead. This alias will be removed in v1.0 */
default as SortAsc } from '../icons/arrow-up-narrow-wide';
// ArrowUpZA aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ArrowUpZA} instead. This alias will be removed in v1.0 */
default as ArrowUpZa } from '../icons/arrow-up-z-a';
// Axis3d aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Axis3d} instead. This alias will be removed in v1.0 */
default as Axis3D } from '../icons/axis-3d';
// BadgeCheck aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link BadgeCheck} instead. This alias will be removed in v1.0 */
default as Verified } from '../icons/badge-check';
// BadgeQuestionMark aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link BadgeQuestionMark} instead. This alias will be removed in v1.0 */
default as BadgeHelp } from '../icons/badge-question-mark';
// BetweenHorizontalEnd aliases
export { 
/** @deprecated Renamed because of typo, use {@link BetweenHorizontalEnd} instead. This alias will be removed in v1.0 */
default as BetweenHorizonalEnd } from '../icons/between-horizontal-end';
// BetweenHorizontalStart aliases
export { 
/** @deprecated Renamed because of typo, use {@link BetweenHorizontalStart} instead. This alias will be removed in v1.0 */
default as BetweenHorizonalStart } from '../icons/between-horizontal-start';
// BookDashed aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link BookDashed} instead. This alias will be removed in v1.0.0 */
default as BookTemplate } from '../icons/book-dashed';
// Braces aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Braces} instead. This alias will be removed in v1.0 */
default as CurlyBraces } from '../icons/braces';
// Captions aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Captions} instead. This alias will be removed in v1.0 */
default as Subtitles } from '../icons/captions';
// ChartArea aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartArea} instead. This alias will be removed in v1.0 */
default as AreaChart } from '../icons/chart-area';
// ChartBarBig aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartBarBig} instead. This alias will be removed in v1.0 */
default as BarChartHorizontalBig } from '../icons/chart-bar-big';
// ChartBar aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartBar} instead. This alias will be removed in v1.0 */
default as BarChartHorizontal } from '../icons/chart-bar';
// ChartCandlestick aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartCandlestick} instead. This alias will be removed in v1.0 */
default as CandlestickChart } from '../icons/chart-candlestick';
// ChartColumnBig aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartColumnBig} instead. This alias will be removed in v1.0 */
default as BarChartBig } from '../icons/chart-column-big';
// ChartColumnIncreasing aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartColumnIncreasing} instead. This alias will be removed in v1.0 */
default as BarChart4 } from '../icons/chart-column-increasing';
// ChartLine aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartLine} instead. This alias will be removed in v1.0 */
default as LineChart } from '../icons/chart-line';
// ChartColumn aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartColumn} instead. This alias will be removed in v1.0 */
default as BarChart3 } from '../icons/chart-column';
// ChartNoAxesColumnIncreasing aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartNoAxesColumnIncreasing} instead. This alias will be removed in v1.0 */
default as BarChart } from '../icons/chart-no-axes-column-increasing';
// ChartNoAxesColumn aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartNoAxesColumn} instead. This alias will be removed in v1.0 */
default as BarChart2 } from '../icons/chart-no-axes-column';
// ChartNoAxesGantt aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartNoAxesGantt} instead. This alias will be removed in v1.0 */
default as GanttChart } from '../icons/chart-no-axes-gantt';
// ChartPie aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartPie} instead. This alias will be removed in v1.0 */
default as PieChart } from '../icons/chart-pie';
// ChartScatter aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ChartScatter} instead. This alias will be removed in v1.0 */
default as ScatterChart } from '../icons/chart-scatter';
// CircleAlert aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleAlert} instead. This alias will be removed in v1.0 */
default as AlertCircle } from '../icons/circle-alert';
// CircleArrowDown aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowDown} instead. This alias will be removed in v1.0 */
default as ArrowDownCircle } from '../icons/circle-arrow-down';
// CircleArrowLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowLeft} instead. This alias will be removed in v1.0 */
default as ArrowLeftCircle } from '../icons/circle-arrow-left';
// CircleArrowOutDownLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowOutDownLeft} instead. This alias will be removed in v1.0 */
default as ArrowDownLeftFromCircle } from '../icons/circle-arrow-out-down-left';
// CircleArrowOutDownRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowOutDownRight} instead. This alias will be removed in v1.0 */
default as ArrowDownRightFromCircle } from '../icons/circle-arrow-out-down-right';
// CircleArrowOutUpLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowOutUpLeft} instead. This alias will be removed in v1.0 */
default as ArrowUpLeftFromCircle } from '../icons/circle-arrow-out-up-left';
// CircleArrowOutUpRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowOutUpRight} instead. This alias will be removed in v1.0 */
default as ArrowUpRightFromCircle } from '../icons/circle-arrow-out-up-right';
// CircleArrowRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowRight} instead. This alias will be removed in v1.0 */
default as ArrowRightCircle } from '../icons/circle-arrow-right';
// CircleArrowUp aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleArrowUp} instead. This alias will be removed in v1.0 */
default as ArrowUpCircle } from '../icons/circle-arrow-up';
// CircleCheckBig aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleCheckBig} instead. This alias will be removed in v1.0 */
default as CheckCircle } from '../icons/circle-check-big';
// CircleCheck aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleCheck} instead. This alias will be removed in v1.0 */
default as CheckCircle2 } from '../icons/circle-check';
// CircleChevronDown aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleChevronDown} instead. This alias will be removed in v1.0 */
default as ChevronDownCircle } from '../icons/circle-chevron-down';
// CircleChevronLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleChevronLeft} instead. This alias will be removed in v1.0 */
default as ChevronLeftCircle } from '../icons/circle-chevron-left';
// CircleChevronRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleChevronRight} instead. This alias will be removed in v1.0 */
default as ChevronRightCircle } from '../icons/circle-chevron-right';
// CircleChevronUp aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleChevronUp} instead. This alias will be removed in v1.0 */
default as ChevronUpCircle } from '../icons/circle-chevron-up';
// CircleDivide aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleDivide} instead. This alias will be removed in v1.0 */
default as DivideCircle } from '../icons/circle-divide';
// CircleGauge aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleGauge} instead. This alias will be removed in v1.0 */
default as GaugeCircle } from '../icons/circle-gauge';
// CircleMinus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleMinus} instead. This alias will be removed in v1.0 */
default as MinusCircle } from '../icons/circle-minus';
// CircleParkingOff aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleParkingOff} instead. This alias will be removed in v1.0 */
default as ParkingCircleOff } from '../icons/circle-parking-off';
// CircleParking aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleParking} instead. This alias will be removed in v1.0 */
default as ParkingCircle } from '../icons/circle-parking';
// CirclePause aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CirclePause} instead. This alias will be removed in v1.0 */
default as PauseCircle } from '../icons/circle-pause';
// CirclePercent aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CirclePercent} instead. This alias will be removed in v1.0 */
default as PercentCircle } from '../icons/circle-percent';
// CirclePlay aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CirclePlay} instead. This alias will be removed in v1.0 */
default as PlayCircle } from '../icons/circle-play';
// CirclePlus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CirclePlus} instead. This alias will be removed in v1.0 */
default as PlusCircle } from '../icons/circle-plus';
// CirclePower aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CirclePower} instead. This alias will be removed in v1.0 */
default as PowerCircle } from '../icons/circle-power';
// CircleQuestionMark aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleQuestionMark} instead. This alias will be removed in v1.0 */
default as HelpCircle } from '../icons/circle-question-mark';
// CircleQuestionMark aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleQuestionMark} instead. This alias will be removed in v1.0 */
default as CircleHelp } from '../icons/circle-question-mark';
// CircleSlash2 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleSlash2} instead. This alias will be removed in v1.0 */
default as CircleSlashed } from '../icons/circle-slash-2';
// CircleStop aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleStop} instead. This alias will be removed in v1.0 */
default as StopCircle } from '../icons/circle-stop';
// CircleUserRound aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleUserRound} instead. This alias will be removed in v1.0 */
default as UserCircle2 } from '../icons/circle-user-round';
// CircleUser aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleUser} instead. This alias will be removed in v1.0 */
default as UserCircle } from '../icons/circle-user';
// CircleX aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CircleX} instead. This alias will be removed in v1.0 */
default as XCircle } from '../icons/circle-x';
// ClipboardPenLine aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ClipboardPenLine} instead. This alias will be removed in v1.0 */
default as ClipboardSignature } from '../icons/clipboard-pen-line';
// ClipboardPen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ClipboardPen} instead. This alias will be removed in v1.0 */
default as ClipboardEdit } from '../icons/clipboard-pen';
// CloudDownload aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CloudDownload} instead. This alias will be removed in v1.0 */
default as DownloadCloud } from '../icons/cloud-download';
// CloudUpload aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CloudUpload} instead. This alias will be removed in v1.0 */
default as UploadCloud } from '../icons/cloud-upload';
// CodeXml aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link CodeXml} instead. This alias will be removed in v1.0 */
default as Code2 } from '../icons/code-xml';
// Columns2 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Columns2} instead. This alias will be removed in v1.0 */
default as Columns } from '../icons/columns-2';
// Columns3Cog aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Columns3Cog} instead. This alias will be removed in v1.0 */
default as ColumnsSettings } from '../icons/columns-3-cog';
// Columns3Cog aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Columns3Cog} instead. This alias will be removed in v1.0 */
default as TableConfig } from '../icons/columns-3-cog';
// Columns3 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Columns3} instead. This alias will be removed in v1.0 */
default as PanelsLeftRight } from '../icons/columns-3';
// ContactRound aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ContactRound} instead. This alias will be removed in v1.0 */
default as Contact2 } from '../icons/contact-round';
// DiamondPercent aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link DiamondPercent} instead. This alias will be removed in v1.0 */
default as PercentDiamond } from '../icons/diamond-percent';
// Earth aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Earth} instead. This alias will be removed in v1.0 */
default as Globe2 } from '../icons/earth';
// EllipsisVertical aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link EllipsisVertical} instead. This alias will be removed in v1.0 */
default as MoreVertical } from '../icons/ellipsis-vertical';
// Ellipsis aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Ellipsis} instead. This alias will be removed in v1.0 */
default as MoreHorizontal } from '../icons/ellipsis';
// FileAxis3d aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileAxis3d} instead. This alias will be removed in v1.0 */
default as FileAxis3D } from '../icons/file-axis-3d';
// FileChartColumnIncreasing aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileChartColumnIncreasing} instead. This alias will be removed in v1.0 */
default as FileBarChart } from '../icons/file-chart-column-increasing';
// FileChartColumn aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileChartColumn} instead. This alias will be removed in v1.0 */
default as FileBarChart2 } from '../icons/file-chart-column';
// FileChartLine aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileChartLine} instead. This alias will be removed in v1.0 */
default as FileLineChart } from '../icons/file-chart-line';
// FileChartPie aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileChartPie} instead. This alias will be removed in v1.0 */
default as FilePieChart } from '../icons/file-chart-pie';
// FileCog aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileCog} instead. This alias will be removed in v1.0 */
default as FileCog2 } from '../icons/file-cog';
// FilePenLine aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FilePenLine} instead. This alias will be removed in v1.0 */
default as FileSignature } from '../icons/file-pen-line';
// FilePen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FilePen} instead. This alias will be removed in v1.0 */
default as FileEdit } from '../icons/file-pen';
// FilePlay aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FilePlay} instead. This alias will be removed in v1.0 */
default as FileVideo } from '../icons/file-play';
// FileQuestionMark aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileQuestionMark} instead. This alias will be removed in v1.0 */
default as FileQuestion } from '../icons/file-question-mark';
// FileVideoCamera aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FileVideoCamera} instead. This alias will be removed in v1.0 */
default as FileVideo2 } from '../icons/file-video-camera';
// FolderCog aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FolderCog} instead. This alias will be removed in v1.0 */
default as FolderCog2 } from '../icons/folder-cog';
// FolderPen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FolderPen} instead. This alias will be removed in v1.0 */
default as FolderEdit } from '../icons/folder-pen';
// FunnelX aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link FunnelX} instead. This alias will be removed in v1.0 */
default as FilterX } from '../icons/funnel-x';
// Funnel aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Funnel} instead. This alias will be removed in v1.0 */
default as Filter } from '../icons/funnel';
// GitCommitHorizontal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link GitCommitHorizontal} instead. This alias will be removed in v1.0 */
default as GitCommit } from '../icons/git-commit-horizontal';
// Grid2x2Check aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Grid2x2Check} instead. This alias will be removed in v1.0 */
default as Grid2X2Check } from '../icons/grid-2x2-check';
// Grid2x2Plus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Grid2x2Plus} instead. This alias will be removed in v1.0 */
default as Grid2X2Plus } from '../icons/grid-2x2-plus';
// Grid2x2X aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Grid2x2X} instead. This alias will be removed in v1.0 */
default as Grid2X2X } from '../icons/grid-2x2-x';
// Grid2x2 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Grid2x2} instead. This alias will be removed in v1.0 */
default as Grid2X2 } from '../icons/grid-2x2';
// Grid3x3 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Grid3x3} instead. This alias will be removed in v1.0 */
default as Grid } from '../icons/grid-3x3';
// Grid3x3 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Grid3x3} instead. This alias will be removed in v1.0 */
default as Grid3X3 } from '../icons/grid-3x3';
// HandGrab aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link HandGrab} instead. This alias will be removed in v1.0 */
default as Grab } from '../icons/hand-grab';
// HandHelping aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link HandHelping} instead. This alias will be removed in v1.0 */
default as HelpingHand } from '../icons/hand-helping';
// House aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link House} instead. This alias will be removed in v1.0 */
default as Home } from '../icons/house';
// IceCreamBowl aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link IceCreamBowl} instead. This alias will be removed in v1.0 */
default as IceCream2 } from '../icons/ice-cream-bowl';
// IceCreamCone aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link IceCreamCone} instead. This alias will be removed in v1.0 */
default as IceCream } from '../icons/ice-cream-cone';
// IndentDecrease aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link IndentDecrease} instead. This alias will be removed in v1.0 */
default as Outdent } from '../icons/indent-decrease';
// IndentIncrease aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link IndentIncrease} instead. This alias will be removed in v1.0 */
default as Indent } from '../icons/indent-increase';
// LaptopMinimal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link LaptopMinimal} instead. This alias will be removed in v1.0 */
default as Laptop2 } from '../icons/laptop-minimal';
// Layers aliases
export { 
/** @deprecated The icon was combined with another icon that shares the same use case, use {@link Layers} instead. This alias will be removed in v1.0 */
default as Layers3 } from '../icons/layers';
// LoaderCircle aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link LoaderCircle} instead. This alias will be removed in v1.0 */
default as Loader2 } from '../icons/loader-circle';
// LockKeyholeOpen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link LockKeyholeOpen} instead. This alias will be removed in v1.0 */
default as UnlockKeyhole } from '../icons/lock-keyhole-open';
// LockOpen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link LockOpen} instead. This alias will be removed in v1.0 */
default as Unlock } from '../icons/lock-open';
// MailQuestionMark aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link MailQuestionMark} instead. This alias will be removed in v1.0 */
default as MailQuestion } from '../icons/mail-question-mark';
// MapPinPen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link MapPinPen} instead. This alias will be removed in v1.0 */
default as LocationEdit } from '../icons/map-pin-pen';
// MessageCircleQuestionMark aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link MessageCircleQuestionMark} instead. This alias will be removed in v1.0 */
default as MessageCircleQuestion } from '../icons/message-circle-question-mark';
// MicVocal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link MicVocal} instead. This alias will be removed in v1.0 */
default as Mic2 } from '../icons/mic-vocal';
// Move3d aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Move3d} instead. This alias will be removed in v1.0 */
default as Move3D } from '../icons/move-3d';
// OctagonAlert aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link OctagonAlert} instead. This alias will be removed in v1.0 */
default as AlertOctagon } from '../icons/octagon-alert';
// OctagonPause aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link OctagonPause} instead. This alias will be removed in v1.0 */
default as PauseOctagon } from '../icons/octagon-pause';
// OctagonX aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link OctagonX} instead. This alias will be removed in v1.0 */
default as XOctagon } from '../icons/octagon-x';
// PaintbrushVertical aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PaintbrushVertical} instead. This alias will be removed in v1.0 */
default as Paintbrush2 } from '../icons/paintbrush-vertical';
// PanelBottomDashed aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelBottomDashed} instead. This alias will be removed in v1.0 */
default as PanelBottomInactive } from '../icons/panel-bottom-dashed';
// PanelLeftClose aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelLeftClose} instead. This alias will be removed in v1.0 */
default as SidebarClose } from '../icons/panel-left-close';
// PanelLeftDashed aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelLeftDashed} instead. This alias will be removed in v1.0 */
default as PanelLeftInactive } from '../icons/panel-left-dashed';
// PanelLeftOpen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelLeftOpen} instead. This alias will be removed in v1.0 */
default as SidebarOpen } from '../icons/panel-left-open';
// PanelLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelLeft} instead. This alias will be removed in v1.0 */
default as Sidebar } from '../icons/panel-left';
// PanelRightDashed aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelRightDashed} instead. This alias will be removed in v1.0 */
default as PanelRightInactive } from '../icons/panel-right-dashed';
// PanelsTopLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelsTopLeft} instead. This alias will be removed in v1.0 */
default as Layout } from '../icons/panels-top-left';
// PanelTopDashed aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PanelTopDashed} instead. This alias will be removed in v1.0 */
default as PanelTopInactive } from '../icons/panel-top-dashed';
// PenLine aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PenLine} instead. This alias will be removed in v1.0 */
default as Edit3 } from '../icons/pen-line';
// Pen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Pen} instead. This alias will be removed in v1.0 */
default as Edit2 } from '../icons/pen';
// PlugZap aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link PlugZap} instead. This alias will be removed in v1.0 */
default as PlugZap2 } from '../icons/plug-zap';
// RectangleEllipsis aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link RectangleEllipsis} instead. This alias will be removed in v1.0 */
default as FormInput } from '../icons/rectangle-ellipsis';
// Rotate3d aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Rotate3d} instead. This alias will be removed in v1.0 */
default as Rotate3D } from '../icons/rotate-3d';
// Rows2 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Rows2} instead. This alias will be removed in v1.0 */
default as Rows } from '../icons/rows-2';
// Rows3 aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Rows3} instead. This alias will be removed in v1.0 */
default as PanelsTopBottom } from '../icons/rows-3';
// Scale3d aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Scale3d} instead. This alias will be removed in v1.0 */
default as Scale3D } from '../icons/scale-3d';
// SendHorizontal aliases
export { 
/** @deprecated Renamed because of typo, use {@link SendHorizontal} instead. This alias will be removed in v1.0 */
default as SendHorizonal } from '../icons/send-horizontal';
// ShieldQuestionMark aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ShieldQuestionMark} instead. This alias will be removed in v1.0 */
default as ShieldQuestion } from '../icons/shield-question-mark';
// ShieldX aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link ShieldX} instead. This alias will be removed in v1.0 */
default as ShieldClose } from '../icons/shield-x';
// SlidersVertical aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SlidersVertical} instead. This alias will be removed in v1.0 */
default as Sliders } from '../icons/sliders-vertical';
// Sparkles aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Sparkles} instead. This alias will be removed in v1.0 */
default as Stars } from '../icons/sparkles';
// SquareArrowDownLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowDownLeft} instead. This alias will be removed in v1.0 */
default as ArrowDownLeftSquare } from '../icons/square-arrow-down-left';
// SquareArrowDownRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowDownRight} instead. This alias will be removed in v1.0 */
default as ArrowDownRightSquare } from '../icons/square-arrow-down-right';
// SquareActivity aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareActivity} instead. This alias will be removed in v1.0 */
default as ActivitySquare } from '../icons/square-activity';
// SquareArrowDown aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowDown} instead. This alias will be removed in v1.0 */
default as ArrowDownSquare } from '../icons/square-arrow-down';
// SquareArrowLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowLeft} instead. This alias will be removed in v1.0 */
default as ArrowLeftSquare } from '../icons/square-arrow-left';
// SquareArrowOutDownLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowOutDownLeft} instead. This alias will be removed in v1.0 */
default as ArrowDownLeftFromSquare } from '../icons/square-arrow-out-down-left';
// SquareArrowOutDownRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowOutDownRight} instead. This alias will be removed in v1.0 */
default as ArrowDownRightFromSquare } from '../icons/square-arrow-out-down-right';
// SquareArrowOutUpLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowOutUpLeft} instead. This alias will be removed in v1.0 */
default as ArrowUpLeftFromSquare } from '../icons/square-arrow-out-up-left';
// SquareArrowOutUpRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowOutUpRight} instead. This alias will be removed in v1.0 */
default as ArrowUpRightFromSquare } from '../icons/square-arrow-out-up-right';
// SquareArrowRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowRight} instead. This alias will be removed in v1.0 */
default as ArrowRightSquare } from '../icons/square-arrow-right';
// SquareArrowUpLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowUpLeft} instead. This alias will be removed in v1.0 */
default as ArrowUpLeftSquare } from '../icons/square-arrow-up-left';
// SquareArrowUpRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowUpRight} instead. This alias will be removed in v1.0 */
default as ArrowUpRightSquare } from '../icons/square-arrow-up-right';
// SquareArrowUp aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareArrowUp} instead. This alias will be removed in v1.0 */
default as ArrowUpSquare } from '../icons/square-arrow-up';
// SquareAsterisk aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareAsterisk} instead. This alias will be removed in v1.0 */
default as AsteriskSquare } from '../icons/square-asterisk';
// SquareBottomDashedScissors aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareBottomDashedScissors} instead. This alias will be removed in v1.0 */
default as ScissorsSquareDashedBottom } from '../icons/square-bottom-dashed-scissors';
// SquareChartGantt aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareChartGantt} instead. This alias will be removed in v1.0 */
default as GanttChartSquare } from '../icons/square-chart-gantt';
// SquareChartGantt aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareChartGantt} instead. This alias will be removed in v1.0 */
default as SquareGanttChart } from '../icons/square-chart-gantt';
// SquareCheckBig aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareCheckBig} instead. This alias will be removed in v1.0 */
default as CheckSquare } from '../icons/square-check-big';
// SquareChevronDown aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareChevronDown} instead. This alias will be removed in v1.0 */
default as ChevronDownSquare } from '../icons/square-chevron-down';
// SquareCheck aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareCheck} instead. This alias will be removed in v1.0 */
default as CheckSquare2 } from '../icons/square-check';
// SquareChevronLeft aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareChevronLeft} instead. This alias will be removed in v1.0 */
default as ChevronLeftSquare } from '../icons/square-chevron-left';
// SquareChevronUp aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareChevronUp} instead. This alias will be removed in v1.0 */
default as ChevronUpSquare } from '../icons/square-chevron-up';
// SquareChevronRight aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareChevronRight} instead. This alias will be removed in v1.0 */
default as ChevronRightSquare } from '../icons/square-chevron-right';
// SquareCode aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareCode} instead. This alias will be removed in v1.0 */
default as CodeSquare } from '../icons/square-code';
// SquareDashedKanban aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareDashedKanban} instead. This alias will be removed in v1.0 */
default as KanbanSquareDashed } from '../icons/square-dashed-kanban';
// SquareDashedMousePointer aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareDashedMousePointer} instead. This alias will be removed in v1.0 */
default as MousePointerSquareDashed } from '../icons/square-dashed-mouse-pointer';
// SquareDashed aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareDashed} instead. This alias will be removed in v1.0 */
default as BoxSelect } from '../icons/square-dashed';
// SquareDivide aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareDivide} instead. This alias will be removed in v1.0 */
default as DivideSquare } from '../icons/square-divide';
// SquareDot aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareDot} instead. This alias will be removed in v1.0 */
default as DotSquare } from '../icons/square-dot';
// SquareFunction aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareFunction} instead. This alias will be removed in v1.0 */
default as FunctionSquare } from '../icons/square-function';
// SquareEqual aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareEqual} instead. This alias will be removed in v1.0 */
default as EqualSquare } from '../icons/square-equal';
// SquareKanban aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareKanban} instead. This alias will be removed in v1.0 */
default as KanbanSquare } from '../icons/square-kanban';
// SquareLibrary aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareLibrary} instead. This alias will be removed in v1.0 */
default as LibrarySquare } from '../icons/square-library';
// SquareM aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareM} instead. This alias will be removed in v1.0 */
default as MSquare } from '../icons/square-m';
// SquareMinus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareMinus} instead. This alias will be removed in v1.0 */
default as MinusSquare } from '../icons/square-minus';
// SquareMenu aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareMenu} instead. This alias will be removed in v1.0 */
default as MenuSquare } from '../icons/square-menu';
// SquareMousePointer aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareMousePointer} instead. This alias will be removed in v1.0 */
default as Inspect } from '../icons/square-mouse-pointer';
// SquareParkingOff aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareParkingOff} instead. This alias will be removed in v1.0 */
default as ParkingSquareOff } from '../icons/square-parking-off';
// SquareParking aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareParking} instead. This alias will be removed in v1.0 */
default as ParkingSquare } from '../icons/square-parking';
// SquarePen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePen} instead. This alias will be removed in v1.0 */
default as PenBox } from '../icons/square-pen';
// SquarePen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePen} instead. This alias will be removed in v1.0 */
default as Edit } from '../icons/square-pen';
// SquarePen aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePen} instead. This alias will be removed in v1.0 */
default as PenSquare } from '../icons/square-pen';
// SquarePercent aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePercent} instead. This alias will be removed in v1.0 */
default as PercentSquare } from '../icons/square-percent';
// SquarePi aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePi} instead. This alias will be removed in v1.0 */
default as PiSquare } from '../icons/square-pi';
// SquarePilcrow aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePilcrow} instead. This alias will be removed in v1.0 */
default as PilcrowSquare } from '../icons/square-pilcrow';
// SquarePlay aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePlay} instead. This alias will be removed in v1.0 */
default as PlaySquare } from '../icons/square-play';
// SquarePlus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePlus} instead. This alias will be removed in v1.0 */
default as PlusSquare } from '../icons/square-plus';
// SquarePower aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquarePower} instead. This alias will be removed in v1.0 */
default as PowerSquare } from '../icons/square-power';
// SquareScissors aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareScissors} instead. This alias will be removed in v1.0 */
default as ScissorsSquare } from '../icons/square-scissors';
// SquareSlash aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareSlash} instead. This alias will be removed in v1.0 */
default as SlashSquare } from '../icons/square-slash';
// SquareSigma aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareSigma} instead. This alias will be removed in v1.0 */
default as SigmaSquare } from '../icons/square-sigma';
// SquareSplitHorizontal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareSplitHorizontal} instead. This alias will be removed in v1.0 */
default as SplitSquareHorizontal } from '../icons/square-split-horizontal';
// SquareSplitVertical aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareSplitVertical} instead. This alias will be removed in v1.0 */
default as SplitSquareVertical } from '../icons/square-split-vertical';
// SquareTerminal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareTerminal} instead. This alias will be removed in v1.0 */
default as TerminalSquare } from '../icons/square-terminal';
// SquareUser aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareUser} instead. This alias will be removed in v1.0 */
default as UserSquare } from '../icons/square-user';
// SquareUserRound aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareUserRound} instead. This alias will be removed in v1.0 */
default as UserSquare2 } from '../icons/square-user-round';
// SquareX aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link SquareX} instead. This alias will be removed in v1.0 */
default as XSquare } from '../icons/square-x';
// TestTubeDiagonal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link TestTubeDiagonal} instead. This alias will be removed in v1.0 */
default as TestTube2 } from '../icons/test-tube-diagonal';
// TramFront aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link TramFront} instead. This alias will be removed in v1.0 */
default as Train } from '../icons/tram-front';
// TextSelect aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link TextSelect} instead. This alias will be removed in v1.0 */
default as TextSelection } from '../icons/text-select';
// TreePalm aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link TreePalm} instead. This alias will be removed in v1.0 */
default as Palmtree } from '../icons/tree-palm';
// TriangleAlert aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link TriangleAlert} instead. This alias will be removed in v1.0 */
default as AlertTriangle } from '../icons/triangle-alert';
// TvMinimal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link TvMinimal} instead. This alias will be removed in v1.0 */
default as Tv2 } from '../icons/tv-minimal';
// University aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link University} instead. This alias will be removed in v1.0 */
default as School2 } from '../icons/university';
// UserRoundCog aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UserRoundCog} instead. This alias will be removed in v1.0 */
default as UserCog2 } from '../icons/user-round-cog';
// UserRoundCheck aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UserRoundCheck} instead. This alias will be removed in v1.0 */
default as UserCheck2 } from '../icons/user-round-check';
// UserRoundMinus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UserRoundMinus} instead. This alias will be removed in v1.0 */
default as UserMinus2 } from '../icons/user-round-minus';
// UserRoundPlus aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UserRoundPlus} instead. This alias will be removed in v1.0 */
default as UserPlus2 } from '../icons/user-round-plus';
// UserRoundX aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UserRoundX} instead. This alias will be removed in v1.0 */
default as UserX2 } from '../icons/user-round-x';
// UserRound aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UserRound} instead. This alias will be removed in v1.0 */
default as User2 } from '../icons/user-round';
// UsersRound aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UsersRound} instead. This alias will be removed in v1.0 */
default as Users2 } from '../icons/users-round';
// UtensilsCrossed aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link UtensilsCrossed} instead. This alias will be removed in v1.0 */
default as ForkKnifeCrossed } from '../icons/utensils-crossed';
// Utensils aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link Utensils} instead. This alias will be removed in v1.0 */
default as ForkKnife } from '../icons/utensils';
// WalletMinimal aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link WalletMinimal} instead. This alias will be removed in v1.0 */
default as Wallet2 } from '../icons/wallet-minimal';
// WandSparkles aliases
export { 
/** @deprecated The name of this icon was changed because it didn't meet our guidelines anymore, use {@link WandSparkles} instead. This alias will be removed in v1.0 */
default as Wand2 } from '../icons/wand-sparkles';
//# sourceMappingURL=data:application/json;base64,